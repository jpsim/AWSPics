---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS CloudFormation stack to run a serverless password-protected photo gallery

Parameters:
  websiteTitle:
    Description: Title to be displayed on the website
    Type: String
  webBucket:
    Description: Bucket to store published website
    Type: String
  sourceBucket:
    Description: Bucket to store site data such as original pictures and metadata
    Type: String
  resizedBucket:
    Description: Bucket to store resized pictures
    Type: String
  originAccessIdentity:
    Description: CloudFront OAI
    Type: String
  website:
    Description: Actual website
    Type: String
  sessionDuration:
    Description: Number of seconds the user has access to the file
    Type: Number
  sslCertificateArn:
    Description: ACM Certificate ARN
    Type: String
  googleanalytics:
    Description: Google tracking id (gtag)
    Type: String
  ImageMagickLayer:
    Description: layer for nodejs10.x and nodejs12.x for imagemagick here https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:145266761615:applications~image-magick-lambda-layer 
    Type: String
  LambdaRate:
    Description: The rate (frequency) that determines when CloudWatch Events runs the rule that triggers the SiteBuilderFunction.
    Default: rate(365 days)
    AllowedValues:
      - rate(8 hours)
      - rate(1 day)
      - rate(7 days)
      - rate(30 days)
      - rate(90 days)
      - rate(365 days)
    Type: String

Conditions:
  createSSLCert: !Equals [ !Ref sslCertificateArn, "" ]
  googletrackingid: !Equals [ !Ref googleanalytics, "" ]

Resources:

  #
  # Resize Lambda function definition
  #
  ResizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: dist/lambda-resize.zip
      Layers:
        - !Ref ImageMagickLayer
      Role: !GetAtt ResizeLambdaRole.Arn
      Environment:
        Variables:
          RESIZED_BUCKET: !Ref resizedBucket
      Timeout: 30
      MemorySize: 1024

  #
  # Resize IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  ResizeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: ResizeLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}/*'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:GetObject']
        - PolicyName: ResizeLambdaPutResized
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${resizedBucket}/*'
                  - resizedBucket: !Ref resizedBucket
                Action: ['s3:PutObject']

  #
  # CloudWatch Events Rule to run sitebuilder at some frequency
  #
  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: A schedule for the Lambda function..
      ScheduleExpression: !Ref LambdaRate
      State: ENABLED
      Targets:
        - Arn: !Sub ${SiteBuilderFunction.Arn}
          Id: LambdaSchedule
  #
  # Permission to invoke a lambda function with the CloudWatch Event
  #
  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SiteBuilderFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}

  EventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
        FunctionName: !Ref SiteBuilderFunction
        Qualifier: "$LATEST"
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
    DependsOn: LambdaSchedulePermission

  #
  # Site Builder Lambda function definition
  #
  SiteBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: dist/lambda-site-builder.zip
      Environment:
        Variables:
          WEBSITE_TITLE: !Ref websiteTitle
          CLOUDFRONT_DISTRIBUTION_DOMAIN:
            !GetAtt WebDistribution.DomainName
          ORIGINAL_BUCKET: !Ref sourceBucket
          SITE_BUCKET: !Ref webBucket
          WEBSITE: !Ref website
          GOOGLEANALYTICS: !Ref googleanalytics
      Role: !GetAtt SiteBuilderLambdaRole.Arn
      Timeout: 900
      MemorySize: 3008

  #
  # Site Builder IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  SiteBuilderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: SiteBuilderLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}/*'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:GetObject']
        - PolicyName: SiteBuilderLambdaListOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:ListBucket']
        - PolicyName: SiteBuilderLambdaPutSite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${webBucket}/*'
                  - webBucket: !Ref webBucket
                Action: ['s3:PutObject']
        - PolicyName: SiteBuilderLambdaInvalidateDistribution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:ListDistributions

  #
  # Source Bucket
  #
  ResizeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResizeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:s3:::${sourceBucket}
        - sourceBucket: !Ref sourceBucket

  SourceBucket:
    Type: AWS::S3::Bucket
    DependsOn: ResizeInvokePermission
    Properties:
      BucketName: !Ref sourceBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ResizeFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls       : true
        BlockPublicPolicy     : true
        IgnorePublicAcls      : true
        RestrictPublicBuckets : true
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: CheaperS3StorageIntelligentTieringBecauseCachedOnCloudfront
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Transition:
              StorageClass: INTELLIGENT_TIERING
              TransitionInDays: 30

  SourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt SourceBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref sourceBucket, "/*"]]
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption":
                  - "AES256"
    DependsOn: SourceBucket

  #
  # Resized Bucket
  #
  ResizedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref resizedBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls       : true
        BlockPublicPolicy     : true
        IgnorePublicAcls      : true
        RestrictPublicBuckets : true
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: CheaperS3StorageIntelligentTieringBecauseCachedOnCloudfront
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Transition:
              StorageClass: INTELLIGENT_TIERING
              TransitionInDays: 30

  ResizedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ResizedBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt ResizedBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref resizedBucket, "/*"]]
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption":
                  - "AES256"
    DependsOn: ResizedBucket

  #
  # Web Bucket
  #
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref webBucket
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt WebBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity

  #
  # SSL Certificate
  #
  SSLCert:
    Type: AWS::CertificateManager::Certificate
    Condition: createSSLCert
    Properties:
      DomainName: !Ref website

  #
  # CloudFront Distribution
  #
  WebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: http2
        Aliases:
          - !Ref website
        Origins:
          - DomainName: !Sub
              - ${resizedBucket}.s3.amazonaws.com
              - resizedBucket: !Ref resizedBucket
            Id: S3-ResizedBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${sourceBucket}.s3.amazonaws.com
              - sourceBucket: !Ref sourceBucket
            Id: S3-SourceBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${webBucket}.s3.amazonaws.com
              - webBucket: !Ref webBucket
            Id: S3-WebBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
        CacheBehaviors:
          - TargetOriginId: S3-ResizedBucket
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/resized/*'
            Compress: true
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            ForwardedValues:
              QueryString: false
          - TargetOriginId: S3-SourceBucket
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/original/*'
            Compress: true
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            ForwardedValues:
              QueryString: false
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /error.html
            ResponseCode: 403
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
        DefaultCacheBehavior:
          TargetOriginId: S3-WebBucket
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !If [ createSSLCert, !Ref SSLCert, !Ref sslCertificateArn ]
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: 'TLSv1.2_2019'
        # Restrictions:
        #   GeoRestriction:
        #     RestrictionType: 'whitelist'
        #     Locations: 
        #       - 'US'
